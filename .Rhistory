library(readxl)
referrals_to_child_in_protective_services_per_state <- read_excel("R/referrals to child in protective services per state.xlsx")
View(referrals_to_child_in_protective_services_per_state)
setwd("~/")
library(readxl)
child_services_referred_statistics <- read_excel("C:/Users/farcu/Downloads/child services referred statistics.csv")
View(child_services_referred_statistics)
library(readxl)
child_services_referred_statistics <- read_excel("C:/Users/farcu/Downloads/child services referred statistics.xlsx")
View(child_services_referred_statistics)
x=state
x='state'
y='total referrals'
View(child_services_referred_statistics)
1='alabama'
x <- c(alabama, 29126)
x='Alabama
Alaska
Arizona
Arkansas
California
Colorado
Connecticut
Delaware
District of Columbia
Florida
Georgia
Hawaii
Idaho
Illinois
Indiana
Iowa
Kansas
Kentucky
Louisiana
Maine
Maryland
Massachusetts
Michigan
Minnesota
Mississippi
Missouri
Montana
Nebraska
Nevada
New Hampshire
New Jersey
New Mexico
New York
North Carolina
North Dakota
Ohio
Oklahoma
Oregon
Pennsylvania
Puerto Rico
Rhode Island
South Carolina
South Dakota
Tennessee
Texas
Utah
Vermont
Virginia
Washington
West Virginia
Wisconsin
Wyoming
'
y='29,126
23,639
81,484
59,294
403,920
107,340
51,903
20,107
17,602
250,178
124,772
5,132
22,499
86,705
176,970
52,634
51,421
105,143
52,437
23,533
62,351
85,911
151,844
90,261
36,255
85,493
10,199
37,256
40,753
17,630
60,934
41,219
163,917
55,122
3,985
200,733
82,438
83,444
41,951
17,474
18,911
59,240
14,874
141,848
251,213
42,234
19,560
87,291
111,983
42,838
81,435
7,580
'
z='28,656
10,713
45,302
33,755
224,212
36,079
14,645
6,002
6,404
163,494
85,309
2,377
11,117
86,705
120,208
33,319
31,895
50,779
20,597
10,874
21,886
43,923
95,735
31,059
28,106
61,556
10,199
12,642
15,659
10,288
60,934
21,733
163,917
55,122
3,985
89,004
36,758
39,778
41,951
8,365
7,294
47,105
2,379
76,162
198,106
20,909
4,015
36,780
43,874
26,919
26,797
2,943
'
w='470
12,926
36,182
25,539
179,708
71,261
37,258
14,105
11,198
86,684
39,463
2,755
11,382
56,762
19,315
19,526
54,364
31,840
12,659
40,465
41,988
56,109
59,202
8,149
23,937
24,614
25,094
7,342
19,486
111,729
45,680
43,666
9,109
11,617
12,135
12,495
65,686
53,107
21,325
15,545
50,511
68,109
15,919
54,638
4,637
'
plot(x,y)
plot(x,z)
x{alabama}
x[arizona]
x=(Alabama,Alaska,Arizona,Arkansas,California,Colorado,Connecticut,Delaware,District of Columbia,Florida,Georgia,Hawaii,Idaho,Illinois,Indiana,Iowa,Kansas,Kentucky,Louisiana,Maine,Maryland,Massachusetts,Michigan,Minnesota,Mississippi,Missouri,Montana,Nebraska,Nevada,New Hampshire,New Jersey,New Mexico,New York,North Carolina,North Dakota,Ohio,Oklahoma,Oregon,Pennsylvania,Puerto Rico,Rhode Island,South Carolina,South Dakota,Tennessee,Texas,Utah,Vermont,Virginia,Washington,West Virginia,Wisconsin,Wyoming)
print(x)
[1] 52
min(y)<-3,985
min(y)<-'3,985'
x[c(y)]
df <- read.table("clipboard", sep="\t", header=TRUE)
str(df)
df
x <-(df$state)
min(df$total.referrals)
min[df$total.referrals]
table(df$total.referrals)
table(df$total referrals)
table(df total referrals)
table(dftotal referrals)
table(total referrals)
df <- read.table("clipboard", sep="\t", header=TRUE)
str(df)
df
x<-(df$State)
y<-(df$Total.Referrals)
z<-(df$Screened.in.Referrals..reports.)
a<-(df$Screened.out.Referrals)
plot(x,y)
min[df$State]
min(y)
max(y)
min(x)
max(z)
min(z)
plot(y,z)
plot(df$State,df$Total.Referrals)
df$State
df$Screened.in.Referrals..reports.
df$Screened.out.Referrals
df$Total.Referrals
b<-(df$Screened.in.Referrals..reports..Percent)
c<-(df$Screened.out.Referrals.Percent)
d<-(df$Total.Referrals.Rate.per.1.000)
df$Screened.in.Referrals..reports..Percent
df$Screened.out.Referrals.Percent
plot(df$Total.Referrals,df$State)
plot(x,y)
summary(df$State)
summary(df$Screened.in.Referrals..reports.)
summary(a)
summary(y)
min(y)
max(y)
min(a)
max(a)
med(a)
median(a)
log10(Y)
log10(df$Screened.in.Referrals..reports.)
c(df$State,df$Total.Referrals)
plot(x,y)
number of kids <- c(df$State,df$Total.Referrals)
kids <- c(df$State,df$Total.Referrals)
is.vector(kids)
plot(x,y,kids)
plot(y,a)
1<- c(df$State,df$Total.Referrals)
as.numeric(df$State)
as.numeric(x)
df$State <-as.numeric(x)
x <- c(df$State)
x
x <- as.numeric(df$State)
x
df <- data.frame(x = c(df$State),
y = c(df$Total.Referrals))
df
typeof(x)
x <- as.character(sample(c(1, 2, 3, 4), 52, replace = TRUE))
x
x_num <- as.numeric(x)
x_num
x <- as.character(sample(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52), 52, replace = TRUE))
x
myDataframe[is.na(x)] = 0
myDataframe[is.na(myDataframe)] = 0
df[is.na(myDataframe)] = 0
df[is.na(x)] = 0
x
library(universalbank1)
summary(universalbank1)
summary(ID)
library(datasets)
run
summary(universalbank1)
dataframe <- A
x_train, x_test, y_train, y_test = train.testsplit(x, y, test_size=0.3, random_state=42)
x_test, y_train, y_test = train.testsplit(x, y, test_size=0.3, random_state=42)
UniversalBank <- read.csv("C:/Users/farcu/OneDrive/UniversalBank.csv")
View(UniversalBank)
# read file
univ_df = pd.read_cvs('universalbank.cvs')
UniversalBank.drop(columns=['ID','ZIP Code'])
universalbank = univ_df
View(df)
View(UniversalBank)
View(UniversalBank)
library(readr)
univ_df <- read_csv("UniversalBank.csv")
View(univ_df)
univ_df = univ_df.drop(columns=['ID','ZIP Code'])
univ_df.head(6)
univ_df = pd.read_cvs('universalBank.cvs')
UniversalBank.head(6)
summary(UniversalBank)
head(UniversalBank)
univ_df <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card)
UniversalBank <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card)
set.seed(6)
select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card
set.seed(6)
Test_Index = createDataPartition(UniversalBank,p=0.4, list=FALSE)
Test_Data = UniversalBank[Test_Index,]
TraVal_Data = UniversalBank[-Test_Index,]
Train_Index = createDataPartition(UniversalBank,p=0.6, list=FALSE) # 75% of remaining data as training
Train_Data = TraVal_Data[Train_Index,]
Validation_Data = TraVal_Data[-Train_Index,] # rest as validation
summary(Train_Data)
summary(test_data)
univ_df = univ_df.drop(columns=['ID','ZIP Code'])
UniversalBank = univ_df.drop(columns=['ID','ZIP Code'])
UniversalBank = universalbank.drop(columns=['ID','ZIP Code'])
x=UniversalBank['education']
UniversalBank=data.frame()
data.frame(UniversalBank)
data.frame(univ_df)
x=univ_df['education']
training_df, valid_df = train_test_split(univ_df,test_size = 0.4, random_state=1)
data.frame(training)
print('training data')
print('validation data')
new_univ = pd.dataframe(['age':40, 'experience' :10, 'income': 84, 'family' : 2, 'CCAvg' :2, 'education' : 0, 'education' :1, 'mortgage' :0, 'securities account' :0, 'CD Account':0, 'Online' :1, 'credit card' :1])
predictors=list(UniversalBank.columns)
predictors=list(univ_df.columns)
load("C:/Users/farcu/OneDrive/Documents/.RData")
> library(universalbank1)
Error in library(universalbank1) : 
  there is no package called ‘universalbank1’
> summary(universalbank1)
Error in summary(universalbank1) : object 'universalbank1' not found
> summary(ID)
Error in summary(ID) : object 'ID' not found
> library(datasets)
> run
Error: object 'run' not found
> summary(universalbank1)
Error in summary(universalbank1) : object 'universalbank1' not found
> dataframe <- A
Error: object 'A' not found
> x_train, x_test, y_train, y_test = train.testsplit(x, y, test_size=0.3, random_state=42)
Error: unexpected ',' in "x_train,"
> x_test, y_train, y_test = train.testsplit(x, y, test_size=0.3, random_state=42)
Error: unexpected ',' in "x_test,"
> UniversalBank <- read.csv("C:/Users/farcu/OneDrive/UniversalBank.csv")
> View(UniversalBank)
> # read file
> univ_df = pd.read_cvs('universalbank.cvs')
Error in pd.read_cvs("universalbank.cvs") : 
  could not find function "pd.read_cvs"
> UniversalBank.drop(columns=['ID','ZIP Code'])
Error: unexpected '[' in "UniversalBank.drop(columns=["
> universalbank = univ_df
> View(df)
> View(UniversalBank)
> View(UniversalBank)
> library(readr)
> univ_df <- read_csv("UniversalBank.csv")
Rows: 5000 Columns: 14                                                     
-- Column specification ---------------------------------------------------
Delimiter: ","
dbl (14): ID, Age, Experience, Income, ZIP Code, Family, CCAvg, Educati...

i Use `spec()` to retrieve the full column specification for this data.
i Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(univ_df)
> univ_df = univ_df.drop(columns=['ID','ZIP Code'])
Error: unexpected '[' in "univ_df = univ_df.drop(columns=["
> univ_df.head(6)
Error in univ_df.head(6) : could not find function "univ_df.head"
> univ_df = pd.read_cvs('universalBank.cvs')
Error in pd.read_cvs("universalBank.cvs") : 
  could not find function "pd.read_cvs"
> UniversalBank.head(6)
Error in UniversalBank.head(6) : 
  could not find function "UniversalBank.head"
> summary(UniversalBank)
       ID            Age          Experience       Income      
 Min.   :   1   Min.   :23.00   Min.   :-3.0   Min.   :  8.00  
 1st Qu.:1251   1st Qu.:35.00   1st Qu.:10.0   1st Qu.: 39.00  
 Median :2500   Median :45.00   Median :20.0   Median : 64.00  
 Mean   :2500   Mean   :45.34   Mean   :20.1   Mean   : 73.77  
 3rd Qu.:3750   3rd Qu.:55.00   3rd Qu.:30.0   3rd Qu.: 98.00  
 Max.   :5000   Max.   :67.00   Max.   :43.0   Max.   :224.00  
    ZIP.Code         Family          CCAvg          Education    
 Min.   : 9307   Min.   :1.000   Min.   : 0.000   Min.   :1.000  
 1st Qu.:91911   1st Qu.:1.000   1st Qu.: 0.700   1st Qu.:1.000  
 Median :93437   Median :2.000   Median : 1.500   Median :2.000  
 Mean   :93153   Mean   :2.396   Mean   : 1.938   Mean   :1.881  
 3rd Qu.:94608   3rd Qu.:3.000   3rd Qu.: 2.500   3rd Qu.:3.000  
 Max.   :96651   Max.   :4.000   Max.   :10.000   Max.   :3.000  
    Mortgage     Personal.Loan   Securities.Account   CD.Account    
 Min.   :  0.0   Min.   :0.000   Min.   :0.0000     Min.   :0.0000  
 1st Qu.:  0.0   1st Qu.:0.000   1st Qu.:0.0000     1st Qu.:0.0000  
 Median :  0.0   Median :0.000   Median :0.0000     Median :0.0000  
 Mean   : 56.5   Mean   :0.096   Mean   :0.1044     Mean   :0.0604  
 3rd Qu.:101.0   3rd Qu.:0.000   3rd Qu.:0.0000     3rd Qu.:0.0000  
 Max.   :635.0   Max.   :1.000   Max.   :1.0000     Max.   :1.0000  
     Online         CreditCard   
 Min.   :0.0000   Min.   :0.000  
 1st Qu.:0.0000   1st Qu.:0.000  
 Median :1.0000   Median :0.000  
 Mean   :0.5968   Mean   :0.294  
 3rd Qu.:1.0000   3rd Qu.:1.000  
 Max.   :1.0000   Max.   :1.000  
> head(UniversalBank)
  ID Age Experience Income ZIP.Code Family CCAvg Education Mortgage
1  1  25          1     49    91107      4   1.6         1        0
2  2  45         19     34    90089      3   1.5         1        0
3  3  39         15     11    94720      1   1.0         1        0
4  4  35          9    100    94112      1   2.7         2        0
5  5  35          8     45    91330      4   1.0         2        0
6  6  37         13     29    92121      4   0.4         2      155
  Personal.Loan Securities.Account CD.Account Online CreditCard
1             0                  1          0      0          0
2             0                  1          0      0          0
3             0                  0          0      0          0
4             0                  0          0      0          0
5             0                  0          0      0          1
6             0                  0          0      1          0
> univ_df <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card)
Error: unexpected symbol in "univ_df <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account"
> UniversalBank <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card)
Error: unexpected symbol in "UniversalBank <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account"
> set.seed(6)
> select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card
Error: unexpected symbol in "select(age,experience,income,family,CCAvg,Education,mortgage,securities account"
>        set.seed(6)
>        Test_Index = createDataPartition(UniversalBank,p=0.4, list=FALSE)
Error in createDataPartition(UniversalBank, p = 0.4, list = FALSE) : 
  could not find function "createDataPartition"
>        Test_Data = UniversalBank[Test_Index,]
Error in `[.data.frame`(UniversalBank, Test_Index, ) : 
  object 'Test_Index' not found
>        TraVal_Data = UniversalBank[-Test_Index,]
Error in `[.data.frame`(UniversalBank, -Test_Index, ) : 
  object 'Test_Index' not found
>        Train_Index = createDataPartition(UniversalBank,p=0.6, list=FALSE) # 75% of remaining data as training
Error in createDataPartition(UniversalBank, p = 0.6, list = FALSE) : 
  could not find function "createDataPartition"
>        Train_Data = TraVal_Data[Train_Index,]
Error: object 'TraVal_Data' not found
>        Validation_Data = TraVal_Data[-Train_Index,] # rest as validation
Error: object 'TraVal_Data' not found
>        summary(Train_Data)
Error in summary(Train_Data) : object 'Train_Data' not found
>        summary(test_data)
Error in summary(test_data) : object 'test_data' not found
>        univ_df = univ_df.drop(columns=['ID','ZIP Code'])
Error: unexpected '[' in "       univ_df = univ_df.drop(columns=["
>        UniversalBank = univ_df.drop(columns=['ID','ZIP Code'])
Error: unexpected '[' in "       UniversalBank = univ_df.drop(columns=["
>        UniversalBank = universalbank.drop(columns=['ID','ZIP Code'])
Error: unexpected '[' in "       UniversalBank = universalbank.drop(columns=["
>        x=UniversalBank['education']
Error in `[.data.frame`(UniversalBank, "education") : 
  undefined columns selected
>        UniversalBank=data.frame()
>        data.frame(UniversalBank)
data frame with 0 columns and 0 rows
>        data.frame(univ_df)
   ID Age Experience Income ZIP.Code Family CCAvg Education Mortgage
1   1  25          1     49    91107      4   1.6         1        0
2   2  45         19     34    90089      3   1.5         1        0
3   3  39         15     11    94720      1   1.0         1        0
4   4  35          9    100    94112      1   2.7         2        0
5   5  35          8     45    91330      4   1.0         2        0
6   6  37         13     29    92121      4   0.4         2      155
7   7  53         27     72    91711      2   1.5         2        0
8   8  50         24     22    93943      1   0.3         3        0
9   9  35         10     81    90089      3   0.6         2      104
10 10  34          9    180    93023      1   8.9         3        0
11 11  65         39    105    94710      4   2.4         3        0
12 12  29          5     45    90277      3   0.1         2        0
13 13  48         23    114    93106      2   3.8         3        0
14 14  59         32     40    94920      4   2.5         2        0
15 15  67         41    112    91741      1   2.0         1        0
16 16  60         30     22    95054      1   1.5         3        0
17 17  38         14    130    95010      4   4.7         3      134
18 18  42         18     81    94305      4   2.4         1        0
19 19  46         21    193    91604      2   8.1         3        0
20 20  55         28     21    94720      1   0.5         2        0
21 21  56         31     25    94015      4   0.9         2      111
22 22  57         27     63    90095      3   2.0         3        0
23 23  29          5     62    90277      1   1.2         1      260
24 24  44         18     43    91320      2   0.7         1      163
25 25  36         11    152    95521      2   3.9         1      159
26 26  43         19     29    94305      3   0.5         1       97
27 27  40         16     83    95064      4   0.2         3        0
28 28  46         20    158    90064      1   2.4         1        0
29 29  56         30     48    94539      1   2.2         3        0
30 30  38         13    119    94104      1   3.3         2        0
31 31  59         35     35    93106      1   1.2         3      122
32 32  40         16     29    94117      1   2.0         2        0
33 33  53         28     41    94801      2   0.6         3      193
34 34  30          6     18    91330      3   0.9         3        0
35 35  31          5     50    94035      4   1.8         3        0
36 36  48         24     81    92647      3   0.7         1        0
37 37  59         35    121    94720      1   2.9         1        0
38 38  51         25     71    95814      1   1.4         3      198
39 39  42         18    141    94114      3   5.0         3        0
40 40  38         13     80    94115      4   0.7         3      285
41 41  57         32     84    92672      3   1.6         3        0
42 42  34          9     60    94122      3   2.3         1        0
43 43  32          7    132    90019      4   1.1         2      412
44 44  39         15     45    95616      1   0.7         1        0
45 45  46         20    104    94065      1   5.7         1        0
46 46  57         31     52    94720      4   2.5         1        0
47 47  39         14     43    95014      3   0.7         2      153
48 48  37         12    194    91380      4   0.2         3      211
49 49  56         26     81    95747      2   4.5         3        0
50 50  40         16     49    92373      1   1.8         1        0
51 51  32          8      8    92093      4   0.7         2        0
52 52  61         37    131    94720      1   2.9         1        0
53 53  30          6     72    94005      1   0.1         1      207
54 54  50         26    190    90245      3   2.1         3      240
55 55  29          5     44    95819      1   0.2         3        0
56 56  41         17    139    94022      2   8.0         1        0
57 57  55         30     29    94005      3   0.1         2        0
58 58  56         31    131    95616      2   1.2         3        0
59 59  28          2     93    94065      2   0.2         1        0
60 60  31          5    188    91320      2   4.5         1      455
61 61  49         24     39    90404      3   1.7         2        0
62 62  47         21    125    93407      1   5.7         1      112
63 63  42         18     22    90089      1   1.0         1        0
64 64  42         17     32    94523      4   0.0         2        0
65 65  47         23    105    90024      2   3.3         1        0
66 66  59         35    131    91360      1   3.8         1        0
67 67  62         36    105    95670      2   2.8         1      336
68 68  53         23     45    95123      4   2.0         3      132
69 69  47         21     60    93407      3   2.1         1        0
70 70  53         29     20    90045      4   0.2         1        0
71 71  42         18    115    91335      1   3.5         1        0
   Personal.Loan Securities.Account CD.Account Online CreditCard
1              0                  1          0      0          0
2              0                  1          0      0          0
3              0                  0          0      0          0
4              0                  0          0      0          0
5              0                  0          0      0          1
6              0                  0          0      1          0
7              0                  0          0      1          0
8              0                  0          0      0          1
9              0                  0          0      1          0
10             1                  0          0      0          0
11             0                  0          0      0          0
12             0                  0          0      1          0
13             0                  1          0      0          0
14             0                  0          0      1          0
15             0                  1          0      0          0
16             0                  0          0      1          1
17             1                  0          0      0          0
18             0                  0          0      0          0
19             1                  0          0      0          0
20             0                  1          0      0          1
21             0                  0          0      1          0
22             0                  0          0      1          0
23             0                  0          0      1          0
24             0                  1          0      0          0
25             0                  0          0      0          1
26             0                  0          0      1          0
27             0                  0          0      0          0
28             0                  0          0      1          1
29             0                  0          0      1          1
30             1                  0          1      1          1
31             0                  0          0      1          0
32             0                  0          0      1          0
33             0                  0          0      0          0
34             0                  0          0      0          0
35             0                  0          0      1          0
36             0                  0          0      0          0
37             0                  0          0      0          1
38             0                  0          0      0          0
39             1                  1          1      1          0
40             0                  0          0      1          0
41             0                  1          0      0          0
42             0                  0          0      0          0
43             1                  0          0      1          0
44             0                  0          0      1          0
45             0                  0          0      1          1
46             0                  0          0      0          1
47             0                  0          0      1          0
48             1                  1          1      1          1
49             0                  0          0      0          1
50             0                  0          0      0          1
51             0                  1          0      1          0
52             0                  0          0      1          0
53             0                  0          0      0          0
54             1                  0          0      1          0
55             0                  0          0      1          0
56             0                  0          0      1          0
57             0                  1          1      1          0
58             1                  0          0      0          0
59             0                  0          0      0          0
60             0                  0          0      0          0
61             0                  1          0      1          0
62             0                  1          0      0          0
63             0                  0          0      0          0
64             0                  0          0      1          0
65             0                  0          0      0          0
66             0                  0          0      1          1
67             0                  0          0      0          0
68             0                  1          0      0          0
69             0                  0          0      1          1
70             0                  0          0      1          0
71             0                  0          0      0          1
 [ reached 'max' / getOption("max.print") -- omitted 4929 rows ]
>        x=univ_df['education']
Error: Can't subset columns that don't exist.
x Column `education` doesn't exist.
Run `rlang::last_error()` to see where the error occurred.
>        training_df, valid_df = train_test_split(univ_df,test_size = 0.4, random_state=1)
Error: unexpected ',' in "       training_df,"
>        data.frame(training)
Error in data.frame(training) : object 'training' not found
>        print('training data')
[1] "training data"
>        print('validation data')
[1] "validation data"
>        new_univ = pd.dataframe(['age':40, 'experience' :10, 'income': 84, 'family' : 2, 'CCAvg' :2, 'education' : 0, 'education' :1, 'mortgage' :0, 'securities account' :0, 'CD Account':0, 'Online' :1, 'credit card' :1])
Error: unexpected '[' in "       new_univ = pd.dataframe(["
>        predictors=list(UniversalBank.columns)
Error: object 'UniversalBank.columns' not found
>        predictors=list(univ_df.columns)
Error: object 'univ_df.columns' not found
> predictors.remove(outcome)
Error in predictors.remove(outcome) : 
  could not find function "predictors.remove"
> predict.remove(outcome)
Error in predict.remove(outcome) : 
  could not find function "predict.remove"
> print(age,experience,income,family,CCAvg,Mortgage,CD_Account,Online,Credit Card,Education_1,Education_2,Education_3)
Error: unexpected symbol in "print(age,experience,income,family,CCAvg,Mortgage,CD_Account,Online,Credit Card"
> scaler = preprocessing.standardscaler(age)
Error in preprocessing.standardscaler(age) : 
  could not find function "preprocessing.standardscaler"
> scaler.fit(univ_df[predictor])
Error in scaler.fit(univ_df[predictor]) : 
  could not find function "scaler.fit"
> classifier = KneighborsClassifier(n_neighbors=1)
Error in KneighborsClassifier(n_neighbors = 1) : 
  could not find function "KneighborsClassifier"
> classifer.fit(train_x,train_y)
Error in classifer.fit(train_x, train_y) : 
  could not find function "classifer.fit"
> results = []
Error: unexpected '[' in "results = ["
> knn = KneighborsClassifier(n_neighbors=k).fit(train_x,train_y)
Error: unexpected symbol in "knn = KneighborsClassifier(n_neighbors=k).fit"
> results.append({'k':k,'accuracy':accuracy_score(train_y, knn.predict(train_x))})
Error: unexpected ',' in "results.append({'k':k,"
> results=pd.dataframe(resuls)
Error in pd.dataframe(resuls) : could not find function "pd.dataframe"
> p=results.plot.scatter(x='k', y='accuracy',xlim=[0,30])
Error: unexpected '[' in "p=results.plot.scatter(x='k', y='accuracy',xlim=["
> classifier=Kneighborsclassifier(n_neighbors=5)
Error in Kneighborsclassifier(n_neighbors = 5) : 
  could not find function "Kneighborsclassifier"
> classifier.fit(train_x,train_y)
Error in classifier.fit(train_x, train_y) : 
  could not find function "classifier.fit"
> predict_y = classifier.predict(valid_X)
Error in classifier.predict(valid_X) : 
  could not find function "classifier.predict"
> print(confusion_matrix(valid_y,predict_y))
Error in confusion_matrix(valid_y, predict_y) : 
  could not find function "confusion_matrix"
> print('accuracy' :accuracy_score(valid_y,predict_y))
Error in accuracy_score(valid_y, predict_y) : 
  could not find function "accuracy_score"
> test_data=univ_df(test_data)
Error in univ_df(test_data) : could not find function "univ_df"
> 